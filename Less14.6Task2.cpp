/*
Старинная-добрая игра на страницах всех школьных тетрадей. Поле размером 3х3 представлено в виде двумерного массива с типом элементов char. 
Помните тот символьный тип из предыдущего модуля? Теперь он нам и пригодится. Участвуют два игрока, 
которые ходят по очереди и ставят в указанные ими в стандартном вводе координаты свой символ - ‘X’ или ‘O’ (буквы латинского алфавита). 
Как только у одного из игроков будет установлено подряд три крестика или три нолика - он побеждает. Если свободных клеток не осталось, 
а трёх совпадающих элементов не найдено - объявляется ничья. Для простоты, мы не будем рассматривать диагональные совпадения, 
а только строго вертикальные либо строго горизонтальные.

Изначально всё поле инициализируется символом пробела - ‘ ‘. Это можно сделать сразу при объявлении, либо с помощью вложенного цикла. 
На каждом ходе, при занятой клетке или при неверных координатах этой клетки должно быть выведено сообщение и игрок должен указать координаты клетки повторно. 
После каждого хода надо выводить в консоль текущее состояние всего игрового поля, для наглядности.

Сделаю ещё одну небольшую подсказку. Проверку на победу игрока, которую надо осуществлять после каждого хода, можно сделать с помощью вложенного цикла,
сразу проверяя и вертикаль и горизонталь а как именно - попробуйте догадаться сами.
*/

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    char tictactoe[3][3]{};
    
    //initialization gameboard
    for (int n = 0; n < 3; ++n) {
        for (int m = 0; m < 3; ++m) {
            tictactoe[n][m] = ' ';
        }
    }
  
    int x, y, nCount = 0;
    bool bMoveX = true;

    do {
        bool bError = false;
        (bMoveX) ? cout << "X" : cout << "O";
        cout << " move." << endl;
        cout << "Enter the cordinates (X Y): ";
        cin >> x >> y;

        //input valiation
        if (x > 3 || x < 0) bError = true;
        if (y > 3 || y < 0) bError = true;
        if (tictactoe[y][x] != ' ') bError = true;
        if (bError) {
            cout << "incorrect input, try again." << endl;
            continue;
        }

        //write to gameboard
        (bMoveX) ? tictactoe[y][x] = 'X' : tictactoe[y][x] = 'O';

        //display gamebord
        cout << "------" << endl;
        for (int n = 2; n >= 0; --n) {
            for (int m = 0; m < 3; ++m) {
                cout << tictactoe[n][m] << " ";
            }
            cout << endl;
        }

        //who win?
        int nXSum = 0, nYSum = 0;
        for (int n = 0; n < 3; ++n, nXSum = nYSum = 0) {
            for (int m = 0; m < 3; ++m) {
                nXSum += tictactoe[m][n];
                nYSum += tictactoe[n][m];
            }
            if (nXSum == 88 * 3 || nYSum == 88 * 3) {
                cout << "X won!";
                return 0;
            }
            if (nXSum == 79 * 3 || nYSum == 79 * 3) {
                cout << "O won!";
                return 0;
            }
        }

        bMoveX = !bMoveX;
        nCount++;

    } while (nCount < 9);
}